/*
 * FenetrePrincipale.java
 *
 * Created on 28 avril 2008
 * By Yann39 <rockyracer@mailfence.com>
 */

package projetlangageformel;

import java.awt.Color;
import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;

public class FenetrePrincipale extends javax.swing.JFrame {

    /** Creates new form FenetrePrincipale */
    public FenetrePrincipale() {
        initComponents();
        jButton3.setVisible(false);
        jButton4.setVisible(false);
        this.setTitle("Algorithme de Cocke-Kasami-Younger");
        this.setSize(600,394);
    }
    
    protected int cpt;
    protected String[][] pyramideCouple; //Pour identifier les couples
    protected String[][] pyramide; //Premi�re g�n�ration (CKY)
    protected String[][] pyramideArbre; //Seconde g�n�ration (arbre)
    protected String expression; //Expression saisie
    protected ArrayList<String> tabGrammaireG; //Tableau des termes gauches
    protected ArrayList<String> tabGrammaireD; //Tableau des termes droits
    protected int nbFeuilles;  //Nombre de termes dans la grammaire
    protected int TaillePlusGrandTerme=0; //Plus grand nombre de termes dans une case de la pyramide
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jPanel1.setBackground(new java.awt.Color(235, 235, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setBackground(new java.awt.Color(235, 235, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Param\u00e8tres"));
        jTextArea1.setColumns(5);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel1.setText("Grammaire :");

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);

        jScrollPane2.setViewportView(jTextArea2);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel2.setText("Expression \u00e0 v\u00e9rifier :");

        jButton1.setText("V\u00e9rifier");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Importer un fichier");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton5.setText("Vider les champs");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2)
                            .addComponent(jButton5)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(235, 235, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("R\u00e9sultat"));
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 10));
        jLabel3.setText("Veuillez saisir les informations ci-dessus.");

        jButton3.setText("Afficher la pyramide");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Afficher l'arbre");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        JFileChooser chooser = new JFileChooser();//cr�ation dun nouveau filechosser
	chooser.setApproveButtonText("Choix du fichier..."); //intitul� du bouton
        Filtre txt = new Filtre( new String[]{"txt"},"fichiers texte (*.txt)");
        chooser.addChoosableFileFilter(txt);
        String nomFichier="";
        jTextArea1.setText("");
        jTextArea2.setText("");
	if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION)
            nomFichier = chooser.getSelectedFile().getAbsolutePath(); //si un fichier est selectionn�, r�cup�rer le fichier puis sont path et l'afficher dans le champs de texte
        else
            nomFichier = "";

        BufferedReader lecteurAvecBuffer = null;
        String ligne;
        boolean isExpression = false;
        try {
            lecteurAvecBuffer = new BufferedReader(new FileReader(nomFichier));
        }
        catch(FileNotFoundException exc) {
            System.err.println("Erreur d'ouverture : "+exc);
        }
        try {
            int nblignes=0;
            while ((ligne = lecteurAvecBuffer.readLine()) != null) {
                if (!ligne.equals("#########") && !ligne.equals("##########")) {
                    if (ligne.equals("Expression"))
                        isExpression = true;
                    if (!ligne.equals("Grammaire") && !ligne.equals("Expression")) {
                        if (isExpression == false) {
                            if (nblignes==0) jTextArea1.setText(jTextArea1.getText()+ligne);
                            else jTextArea1.setText(jTextArea1.getText()+"\n"+ligne);
                            nblignes++;
                        }
                        else 
                            jTextArea2.setText(jTextArea2.getText()+ligne);
                    }
                }
                
            }
            lecteurAvecBuffer.close();
        }
        catch(IOException ex) {
            System.err.println("Erreur de lecture : "+ex);
        }  
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //==================================================================
        //=================== Affichage de l'arbre =====================
        //==================================================================
        JCanvas jc = new JCanvas(pyramideArbre,nbFeuilles,TaillePlusGrandTerme,pyramideCouple,"Arbre");
        jc.setBackground(Color.WHITE);
        int largeur=0;
        if (TaillePlusGrandTerme == 1)
            largeur=(nbFeuilles*(TaillePlusGrandTerme*24))+((nbFeuilles-1)*4)+TaillePlusGrandTerme*20;
        else
            largeur=(nbFeuilles*(TaillePlusGrandTerme*12))+((nbFeuilles-1)*4)+TaillePlusGrandTerme*20;
        int hauteur=(nbFeuilles*16)+((nbFeuilles-1)*4)+50;
        jc.setPreferredSize(new Dimension(largeur,hauteur));
        jButton4.setEnabled(false);
        FenetrePopup.showOnFrame(jc,"Arbre",largeur,hauteur);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        //Vide le contenu des deux textarea
        jTextArea1.setText("");
        jTextArea2.setText("");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        //==================================================================
        //=================== Affichage de la pyramide =====================
        //==================================================================
        JCanvas jc = new JCanvas(pyramide,nbFeuilles,TaillePlusGrandTerme,pyramideCouple,"Pyramide");
        jc.setBackground(Color.WHITE);
        int largeur=0;
        if (TaillePlusGrandTerme == 1)
            largeur=(nbFeuilles*(TaillePlusGrandTerme*24))+((nbFeuilles-1)*4)+TaillePlusGrandTerme*20;
        else
            largeur=(nbFeuilles*(TaillePlusGrandTerme*12))+((nbFeuilles-1)*4)+TaillePlusGrandTerme*20;
        int hauteur=(nbFeuilles*16)+((nbFeuilles-1)*4)+50;
        jc.setPreferredSize(new Dimension(largeur,hauteur));
        jButton3.setEnabled(false);
        FenetrePopup.showOnFrame(jc,"Pyramide",largeur,hauteur);        
    }//GEN-LAST:event_jButton3ActionPerformed
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //======================================================================
        //================ Gestion des champs vides ============================
        //======================================================================
        if (jTextArea2.getText().length()==0) {
            Color rouge = new Color(255,0,0);
            jLabel3.setForeground(rouge);
            jLabel3.setText("Aucune expression n'a �t� saisie !");
            jButton3.setVisible(false);
            jButton4.setVisible(false);
        }
        else if (jTextArea1.getText().length()==0) {
            Color rouge = new Color(255,0,0);
            jLabel3.setForeground(rouge);
            jLabel3.setText("Aucune grammaire n'a �t� saisie !");
            jButton3.setVisible(false);
            jButton4.setVisible(false);
        }
        //les champs ont �t� saisis, on continu
        else {
            //==================================================================
            //=== Allocation de l'espace n�cessaire pour stocker la pyramide ===
            //==================================================================
            TaillePlusGrandTerme=0;
            expression = jTextArea2.getText();

            nbFeuilles = expression.length();
            pyramide =      new String[nbFeuilles][];
            pyramideArbre = new String[nbFeuilles][];
            pyramideCouple = new String[nbFeuilles][];
            for(int i = 1; i<=nbFeuilles; i++) {
                pyramide[i-1] =      new String[i];
                pyramideArbre[i-1] = new String[i];
                pyramideCouple[i-1] = new String[i];
            }
            //==================================================================
            //=== On s�pare les termes droits et gauches dans deux tableaux ====
            //==================================================================
            String texte = jTextArea1.getText();
            String uneligne;
            texte = texte+"\n";
            int separateur, retourligne;
            int nbLignes = jTextArea1.getLineCount();
            tabGrammaireG = new ArrayList<String>();
            tabGrammaireD = new ArrayList<String>();
            for (int i=0;i<nbLignes;i++) {
                if (texte.length()>=3) {
                    //on r�cup�re la premi�re ligne
                    retourligne = texte.indexOf('\n');
                    uneligne = texte.substring(0,retourligne);
                    //on rempli les tableaux avec les termes gauche et droit
                    separateur = texte.indexOf('>');
                    tabGrammaireG.add(uneligne.substring(0,separateur));
                    tabGrammaireD.add(uneligne.substring(separateur+1));
                    //on retire la ligne qu'on vient de traiter
                    texte = texte.substring(retourligne+1);
                }
            }   
            //==================================================================
            //================ Calcul de la base de la pyramide ================
            //==================================================================
            for(int i=0; i<nbFeuilles; i++) {
                pyramide[nbFeuilles-1][i] = trouverBase(tabGrammaireG,tabGrammaireD,expression.substring(i,i+1));
                pyramideArbre[nbFeuilles-1][i] = "";
                pyramideCouple[nbFeuilles-1][i] = "";
            }
            //==================================================================
            //========= Calcul de la partie sup�rieure de la pyramide ==========
            //==================================================================
            //Parcours de toutes les lignes sauf la base
            for(int ligne=(nbFeuilles-2); ligne>=0; ligne--) { 
                // Toutes les cellules des lignes (autant de cellules que le num�ro de la ligne)
                for(int cellule=0; cellule<=ligne;cellule++) {
                    // Initialisation � vide
                    pyramide[ligne][cellule] = "";
                    pyramideArbre[ligne][cellule] = "";
                    pyramideCouple[ligne][cellule] = "";
                    for(int asc_ligne=(nbFeuilles-1), dsc_ligne=(ligne+1),asc_ind=cellule, dsc_ind=cellule+1; dsc_ligne<(nbFeuilles); asc_ligne--,dsc_ligne++,dsc_ind++) {
                        String trouve = trouverRegles(pyramide[asc_ligne][asc_ind],pyramide[dsc_ligne][dsc_ind],tabGrammaireG,tabGrammaireD);
                        // Premier ajout
                        if(trouve.length()>0)
                            pyramide[ligne][cellule] += ","+trouve;
                        if(pyramide[ligne][cellule].length()>0 && pyramide[ligne][cellule].charAt(0)==',')
                            pyramide[ligne][cellule] = pyramide[ligne][cellule].substring(1);
                    }
                    pyramide[ligne][cellule] = nettoyer(pyramide[ligne][cellule]);
                }
            }
            //==================================================================
            //============ Affichage de la validit� de l'expression ============
            //==================================================================
            boolean motOK = contientS(pyramide[0][0]);
            if(motOK) {
                System.out.println("Le mot est v�rifi�.");
                Color vert = new Color(0,200,0);
                jLabel3.setForeground(vert);
                jLabel3.setText("L'expression est v�rifi�e !");
                // Si OK, alors on surligne les cases pour donner une id�e de l'arbre
                String top = pyramide[0][0];
                pyramide[0][0] = "S";
                pyramideArbre[0][0] = pyramide[0][0];
                cpt=0;
                simulerArbre(0,0,"S");
                pyramide[0][0] = top;
                jButton3.setVisible(true);
                jButton3.setEnabled(true);
                jButton4.setVisible(true);
                jButton4.setEnabled(true);
            } 
            else {
                System.err.println("Le mot n'est pas v�rifi�.");
                System.out.println("L'expression n'est pas v�rifi�e (ne contient\npas \"S\" au somment de la pyramide.");
                Color rouge = new Color(255,0,0);
                jLabel3.setForeground(rouge);
                jLabel3.setText("L'expression n'est pas v�rifi�e !");
                jButton3.setVisible(false);
                jButton4.setVisible(false);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
 // <editor-fold defaultstate="collapsed" desc="Fonction trouverBase : Recherche de la base (ligne du bas)">
    //==========================================================================
    //================== Recherche de la base (ligne du bas) ===================
    //==========================================================================
    private String trouverBase(ArrayList<String> grammaireG, ArrayList<String> grammaireD, String motTerminal) {
        String res = "";
        for(int i=0; i<grammaireG.size(); i++) {
            if(motTerminal.equals(grammaireD.get(i))) {
                if (res.length()<=0)
                    res += grammaireG.get(i);
                else
                    res += (","+grammaireG.get(i));
            }
        }
        return res;
    }
    // </editor-fold>

 // <editor-fold defaultstate="collapsed" desc="Fonction nettoyer : Enl�ve les doublons dans une cha�ne avec des virgules">
    //==========================================================================
    //========= Enl�ve les doublons dans une cha�ne avec des virgules ==========
    //==========================================================================
    private String nettoyer(String s) {
        String res = "";
        String mot = "";
        int compt = 0;
        int posDebut = 0;
        int posVirgule = -1;
        ArrayList<String> al = new ArrayList<String>();
        do {
            // Recherche d'un mot
            posVirgule = s.indexOf(',',posDebut);
            if(posVirgule>=0)
                mot = s.substring(posDebut,posVirgule);
            else
                mot = s.substring(posDebut);
            posDebut = posVirgule+1;
            // Ajout � la liste des couples
            if (mot.length()>0 && !al.contains(mot))
                al.add(mot);   
        }while((-1)!=posVirgule);
        for(int i=0;i<al.size();i++) {
            compt++;
            if (res.length()<=0)
                res += al.get(i);
            else
                res += (","+al.get(i));
        }
        if (compt > TaillePlusGrandTerme)
            TaillePlusGrandTerme = compt;
        return res;
    }
    // </editor-fold>
    
 // <editor-fold defaultstate="collapsed" desc="Fonction trouverCouples : Trouve tous les couples possibles de deux chaines du type "A,B,C,D"">
    //==========================================================================
    //== Trouve tous les couples possibles de deux chaines du type "A,B,C,D" ===
    //==========================================================================
    private ArrayList<String> trouverCouples(String partG, String partD) {
        // On a deux chaines A,B,C et X,Y,Z, on veut r�pertorier tous les 
        // couples (AX AY AZ BX BY ... CZ) dans l'ArrayList 'src'.
        ArrayList<String> src = new ArrayList<String>();
        String motG; String motD;
        int posDebutG = 0;    int posDebutD = 0;
        int posVirguleG = -1; int posVirguleD = -1;
        do {
            //Recherche d'un mot
            posVirguleG = partG.indexOf(',',posDebutG);
            if(posVirguleG>=0)
                motG = partG.substring(posDebutG,posVirguleG);
            else
                motG = partG.substring(posDebutG);
            posDebutG = posVirguleG+1;
            
            do {
                //Recherche d'un mot
                posVirguleD = partD.indexOf(',',posDebutD);
                if(posVirguleD>=0)
                    motD = partD.substring(posDebutD,posVirguleD);
                else
                    motD = partD.substring(posDebutD);
                posDebutD = posVirguleD+1;
                //Ajout � la liste des couples
                if (motG.length()>0 || motD.length()>0) {
                    src.add(motG+motD);
                }
                
            }
            while((-1)!=posVirguleD);
        }
        while((-1)!=posVirguleG);
        return src;
    }
    // </editor-fold>
  
 // <editor-fold defaultstate="collapsed" desc="Fonction trouverRegles : Permet de trouver toutes les r�gles de grammaire qui donnent les couples indiqu�s">
    //========================================================================================
    //== Permet de trouver toutes les r�gles de grammaire qui donnent les couples indiqu�s ===
    //========================================================================================
    private String trouverRegles(String partG,String partD,ArrayList<String >grammaireG,ArrayList<String >grammaireD) {
        String res = "";
        ArrayList<String> src = new ArrayList<String>();
        src = trouverCouples(partG,partD);

        //On cherche les r�gles de grammaire qui donnent les couples trouv�es
        for(int i=0; i<grammaireG.size(); i++) {
            for(int j=0; j<src.size(); j++) {
                if(src.get(j).equals(grammaireD.get(i))) {
                    if (res.length()<=0)
                        res += grammaireG.get(i);
                    else
                        res += (","+grammaireG.get(i));
                }
            }
        }
        return res;
    }
 // </editor-fold>
    
 // <editor-fold defaultstate="collapsed" desc="Fonction contientS : Permet de savoir si on � un S au sommet de la pyramide">
    //==========================================================================
    //========= Permet de savoir si on � un S au sommet de la pyramide =========
    //==========================================================================
    private boolean contientS(String a) {
        return (a.indexOf("S")!=(-1));
    }
// </editor-fold>
    
 // <editor-fold defaultstate="collapsed" desc="Fonction simulerArbre : Permet de construire une pyramide permettant de montrer comment l'arbre serait construit">
    //============================================================================================================
    //========= Permet de construire une pyramide permettant de montrer comment l'arbre serait construit =========
    //============================================================================================================
     private void simulerArbre(int ligneAnalyse,int celluleAnalyse, String top) {
        boolean trouve = false;
        int nbFeuilles = expression.length();
        for(int asc_ligne=(nbFeuilles-1), dsc_ligne=(ligneAnalyse+1),asc_ind=celluleAnalyse, dsc_ind=celluleAnalyse+1;dsc_ligne<(nbFeuilles) && !trouve;asc_ligne--,dsc_ligne++,dsc_ind++) {
            ArrayList<String> listeCouplesPossibilites = new ArrayList<String>();
            listeCouplesPossibilites = trouverCouples(pyramide[asc_ligne][asc_ind],pyramide[dsc_ligne][dsc_ind]);
            ArrayList<String> listeTops = new ArrayList<String>();
            listeTops = trouverCouples(top,"");
            for(int l=0; l<listeTops.size() && !trouve; l++) {
                for(int k=0; k<listeCouplesPossibilites.size() && !trouve; k++) {
                    for(int m=0; m<tabGrammaireG.size() && !trouve; m++) {
                        if(tabGrammaireG.get(m).equals(listeTops.get(l))) {
                            if(listeCouplesPossibilites.get(k).equals(tabGrammaireD.get(m))) {
                                cpt++;
                                trouve = true;
                                pyramideArbre[asc_ligne][asc_ind] = listeCouplesPossibilites.get(k).substring(l,l+1);
                                pyramideArbre[dsc_ligne][dsc_ind] = listeCouplesPossibilites.get(k).substring(l+1);
                                pyramideCouple[asc_ligne][asc_ind] = cpt+"";
                                pyramideCouple[dsc_ligne][dsc_ind] = cpt+"";
                                simulerArbre(asc_ligne,asc_ind,pyramideArbre[asc_ligne][asc_ind]);
                                simulerArbre(dsc_ligne,dsc_ind,pyramideArbre[dsc_ligne][dsc_ind]);
                            }
                        }
                    }  
                }
            }
        }
    }
 // </editor-fold>
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FenetrePrincipale().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
    
}
